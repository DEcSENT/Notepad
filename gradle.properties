# Project-wide Gradle settings.

# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.

# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html

# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
android.enableJetifier=true
android.useAndroidX=true
org.gradle.jvmargs=-Xmx2048m

# Starting from version 1.3.30, kapt supports incremental annotation processing as an experimental feature.
# Currently, annotation processing can be incremental only if all annotation processors being used are incremental.
# Incremental annotation processing is enabled by default starting from version 1.3.50.
kapt.incremental.apt=true

# To improve the speed of builds that use kapt, you can enable the Gradle worker API for kapt tasks.
# Using the worker API lets Gradle run independent annotation processing tasks from a single project in parallel, which in some cases significantly decreases the execution time.
# However, running kapt with Gradle worker API enabled can result in increased memory consumption due to parallel execution.
kapt.use.worker.api=true

# Enables incubating configuration on demand, where Gradle will attempt to configure only necessary projects.
org.gradle.configureondemand=true

# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. More details, visit
# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
org.gradle.parallel=true

# Gradle will try to reuse outputs from previous builds for all builds, unless
# explicitly disabled with --no-build-cache.
# https://docs.gradle.org/current/userguide/build_cache.html
org.gradle.caching=true

# Enables parallel tasks execution within a project with Workers API.
# Does not enable using actual worker proccesses
# (Kotlin Daemon can be shared which uses less memory)
kotlin.parallel.tasks.in.project=true
